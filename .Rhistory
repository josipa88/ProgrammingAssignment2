makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(value) {
x <<- value
inverse <<- NULL
}
get <- function() x
setinverse <- function(inverse_matrix) {
inverse <<- inverse_matrix
}
getinverse <- function() inverse
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function(a) {
value <- a$getinverse()
if(!is.null(value)) {
print("getting cached data")
value
} else {
data <- a$get()
value <<- solve(data)
a$setinverse(value)
value
}
}
moja <- makeCacheMatrix()
x <- matrix(c(3, 2, -4, -5), 2, 2)
moja$set(x)
moja$get()
cacheSolve(moja)
cacheSolve(moja)
matrix <- solve(x)
matrix
moja$set(matrix)
cacheSolve(moja)
moja$getinverse()
moja$set(matrix)
moja$getinverse()
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(value) {
x <<- value
inverse <<- NULL
}
get <- function() x
setinverse <- function(inverse_matrix) {
inverse <<- inverse_matrix
}
getinverse <- function() inverse
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function(a) {
value <- a$getinverse()
if(!is.null(value)) {
print("getting cached data")
value
} else {
data <- a$get()
value <<- solve(data)
a$setinverse(value)
value
}
}
hihi <- makeCacheMatrix()
x <- matrix(c(3 2, -4, -5), 2, 2)
x <- matrix(c(3, 2, -4, -5), 2, 2)
hihi$set(x)
hihi$get()
haha <- solve(x)
haha
hihi$setinverse(haha)
hihi$getinverse()
cacheSolve(hihi)
y <- matrix(1:4, 2, 2)
hihi$set(y)
solve(y)
cache(hihi)
cacheSolve(hihi)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(value) {
x <<- value
inverse <<- NULL
}
get <- function() x
setinverse <- function(inverse_matrix) {
inverse <<- inverse_matrix
}
getinverse <- function() inverse
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function(a) {
value <- a$getinverse()
if(!is.null(value)) {
print("getting cached data")
value
} else {
data <- a$get()
value <<- solve(data)
a$setinverse(value)
return(value)
}
}
hihi$set(y)
y
hihi$get()
cacheSolve(hihi)
invMat <- solve()
invMat <- solve(y)
hihi$setinverse(invMat)
cacheSolve(hihi)
z <- matrix(5:10, 2, 2)
hihi$set(z)
cacheSolve(hihi)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
mvec <- makeVector()
x <- 1:4
mvec$set(x)
cachemean(mvec)
cacheSolve((hihi))
hihi$get()
data <- hihi$get()
value <<- solve(data)
value
hihi$setinverse(value)
value
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(value) {
x <<- value
inverse <<- NULL
}
get <- function() x
setinverse <- function(inverse_matrix) {
inverse <<- inverse_matrix
}
getinverse <- function() inverse
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function(a) {
value <- a$getinverse()
if(!is.null(value)) {
print("getting cached data")
value
} else {
data <- a$get()
value <<- solve(data)
a$setinverse(value)
a$getinverse()
}
}
cacheSolve(hihi)
a <- matrix(c(3, 2, -4, -5), 2, 2)
hihi$set(a)
cacheSolve(hihi)
value <<- a$getinverse()
if(!is.null(value)) {
print("getting cached data")
return(value)
} else {
data <- a$get()
value <<- solve(data)
a$setinverse(value)
a$getinverse()
}
}
cacheSolve <- function(a) {
value <<- a$getinverse()
if(!is.null(value)) {
print("getting cached data")
return(value)
} else {
data <- a$get()
value <<- solve(data)
a$setinverse(value)
a$getinverse()
}
}
hihi$get()
cacheSolve(hihi)
y <- matrix(1:4, 2, 2)
hihi$set(y)
cacheSolve(hihi)
z <- matrix(c(1,1,1,1), 2, 2)
hihi$set(z)
cacheSolve(hihi)
z
solve(z)
z <- matrix(5:8, 2, 2)
hihi$set(z)
cacheSolve(hihi)
solve(z)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(value) {
x <<- value
inverse <<- NULL
}
get <- function() x
setinverse <- function(inverse_matrix) {
inverse <<- inverse_matrix
}
getinverse <- function() inverse
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function(a) {
value <<- a$getinverse()
if(!is.null(value)) {
print("getting cached data")
return(value)
} else {
data <- a$get()
value <<- solve(data)
a$setinverse(value)
a$getinverse()
}
}
x <- matrix(c(3, 2, -4, -5), 2, 2)
hihi$set(x)
hihi$get()
cacheSolve(hihi)
inv <- solv(x)
inv <- solve(x)
hihi$setinverse(inv)
hihi$getinverse()
